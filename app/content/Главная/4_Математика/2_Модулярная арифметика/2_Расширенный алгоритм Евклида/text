 *{x}*

Просто для нахождения gcd даже не нужно знать, как устроен алгоритм Евклида — он есть в компиляторе.

Расширенный алгоритм Евклида находит, помимо g = gcd(a, b), такие целые коэффициенты x и y, что

`a * x + b * y = g`

Заметим, что решений бесконечно много: имея решение (x, y), можно x увеличить на b, а y уменьшить на a, и равенство при этом не изменится.

*Основная идея*

Алгоритм тоже будет рекурсивный. Пусть мы посчитали нужные коэффициенты x' и y', для пары (b, a mod b):

`b * x' + (a - floor(a / b) * b) * y' = g`

Теперь выполним перегруппировку слагаемых (сгруппируем по исходным a и b) и получим:

`a * x + b * y = g`

Сравнивая это с исходным выражением, получаем, что для исходных x и y подходят коэффициенты при a и b.

*Реализация*

```cpp
int gcd(int a, int b, int &x, int &y) {
    if (a == 0) {
        x = 0;
        y = 1;
        return b;
    }
    int x1, y1;
    int d = gcd(b % a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return d;
}
```
Эта рекурсивная функция по прежнему возвращает значение gcd(a, b), но помимо этого записывает в переданные по ссылке переменные x и y искомые коэффициенты.

*Применение*

Эта модификация алгоритма интересна, потому что с помощью неё можно искать обратный элемент по модулю: такой элемент `a^-1`, что `a * a ≡ 1` — что то же самое, что найти решение в целых числах:

`a * a^-1 + k * m = 1`

Также с помощью расширенного алгоритма Евклида можно решать линейные диофантовы уравнения — находить решения

`a * x + b * y = c`

в целых числах. Для этого достаточно проверить, что c делится на g = gcd(a,b), и если это так, то x и y их алгоритма нужно просто домножить на `c/g`

Подборка задач:

https://informatics.msk.ru/mod/statements/view.php?id=4663&chapterid=4187#1
